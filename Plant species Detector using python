import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.preprocessing.image import load_img, img_to_array import numpy as np
import matplotlib.pyplot as plt import numpy as np
import pandas as pd
import matplotlib.pyplot as plt import tensorflow_hub as hub import tensorflow_datasets as tfds from tensorflow.keras import layers import numpy as np
import matplotlib.pyplot as plt import tensorflow_hub as hub
import tensorflow_datasets as tfds from tensorflow.keras import layers def format_image(image, label):
image = tf.image.resize(image, (IMAGE_RES, IMAGE_RES)) / 255.0 return image, label
train_data data
# Define the validation split ratio validation_split = 0.2
num_validation_samples = int(num_examplesvalidation_split) validation_data = data.take(num_validation_samples) train_batches
train_data.map(format_image).cache().prefetch(buffer_size=tf.data.AUTOTUNE) validation_batches	=
validation_data.map(format_image).cache().prefetch(buffer_size=tf.data.AUTOTUNE)
 
# Create the base model (MobileNetV2) base_model = tf.keras.applications. MobileNetV2( input_shape=(IMAGE_RES, IMAGE_RES, 3), include_top=False,
weights='imagenet')
# Freeze the base model base_model.trainable = False
#Add custom Layers for classification
global_average_layer = tf.keras.layers.GlobalAveragePooling2D() prediction_layer = tf.keras.layers. Dense(num_classes, activation='softmax') # Create the final model
model tf.keras.Sequential ([
base_model, global_average_layer, prediction_layer ]) # Compile the model
model.compile( optimizer='adam',
loss='sparse_categorical_crossentropy', metrics=['accuracy']
)
#Train the model
history model.fit(train_batches, validation_data=validation_batches, epochs=10) #Evaluate the model on the testing dataset testing_batchestesting_data.map(format_image).cache().prefetch (buffer_size=tf.data.AUTOTUNE)
test_loss, test_accuracy = model.evaluate(testing_batches) print("Test Accuracy:", test_accuracy)
